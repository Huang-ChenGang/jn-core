plugins {
    id 'org.springframework.boot' version '2.3.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

group = 'com.jn'
version = '2020.12.0-SNAPSHOT'
sourceCompatibility = '11'

ext {
    publishNexusReleases = "http://118.25.184.76:8081/nexus/content/repositories/oobusReleases/"
    publishNexusSnapshots = "http://118.25.184.76:8081/nexus/content/repositories/oobusSnapshots/"
    publishNexusUser = NexusUser
    publishNexusPwd = NexusPwd
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'

    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    compileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
    testCompileOnly 'org.projectlombok:lombok:1.18.16'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? publishNexusSnapshots : publishNexusReleases
            credentials {
                username publishNexusUser
                password publishNexusPwd
            }
        }
    }
}
